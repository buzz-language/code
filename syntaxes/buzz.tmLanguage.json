{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "buzz",
  "patterns": [
    {
      "include": "#functions"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "storage_types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#multiline-strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#numeric"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#patterns"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.buzz",
          "match": "\\b(void|static|const|extern|import|export|from|test|as|in|while|if|else|fun|try|catch|throw|constructor|return|switch|default|break|for|foreach|do|until|continue|resolve|resume|yield)\\b"
        },
        {
          "name": "keyword.operator.assignment.buzz",
          "match": "(=|\\+=|\\-=|\\/=|\\*=)"
        },
        {
          "name": "keyword.operator.logical.buzz",
          "match": "\\b(!|and|or|band|bor|xor|\\?\\?)\\b"
        },
        {
          "name": "keyword.operator.closure.dart",
          "match": "(->)"
        },
        {
          "name": "keyword.operator.arithmetic.buzz",
          "match": "(\\+|\\-|\\/|%|\\*|>>|<<|\\\\|\\^|&|~|!>)"
        },
        {
          "name": "keyword.operator.comparison.buzz",
          "match": "(==|!=|<=?|>=?|\\bis|\\?\\?)"
        },
        {
          "name": "keyword.declaration.dart",
          "match": "\\b(enum|object|protocol)\\b"
        },
        {
          "name": "constant.language.buzz",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "variable.language.this.buzz",
          "match": "\\b(this)\\b"
        },
        {
          "name": "storage.type.built-in.primitive.buzz",
          "match": "\\b(ud|str|num|obj|fib|bool|type|pat)\\b\\??"
        }
      ]
    },
    "string-interp": {
      "patterns": [
        {
          "name": "string.interpolated.expression.buzz",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#identifier"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#numeric"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#multiline-strings"
            },
            {
              "include": "#patterns"
            }
          ]
        }
      ]
    },
    "patterns": {
      "name": "string.regexp.buzz",
      "begin": "_",
      "end": "_",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.buzz",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        },
        {
          "include": "#string-interp"
        }
      ]
    },
    "multiline-strings": {
      "name": "string.multiline.buzz",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        },
        {
          "include": "#string-interp"
        }
      ]
    },
    "numeric": {
      "name": "numeric.buzz",
      "patterns": [
        {
          "name": "constant.numeric.decimal.buzz",
          "match": "\\b[0-9][0-9]*(\\.[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.binary.buzz",
          "match": "\\b0b[0-1]+\\b"
        },
        {
          "name": "constant.numeric.hexa.buzz",
          "match": "\\b0x[0-9A-F]+\\b"
        }
      ]
    },
    "comment": {
      "name": "comment.line.buzz",
      "match": "\\|[^\n]*"
    },
    "identifier": {
      "name": "entity.name.buzz",
      "match": "\\b[a-zA-Z][a-zA-Z0-9]+\\b"
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.comma.buzz",
          "match": ","
        },
        {
          "name": "punctuation.terminator.buzz",
          "match": ";"
        },
        {
          "name": "punctuation.dot.buzz",
          "match": "\\."
        },
        {
          "name": "punctuation.buzz",
          "match": "(:)"
        }
      ]
    },
    "builtins": {
      "match": "\\b(assert|print)\\b",
      "name": "support.function.buzz"
    },
    "functions": {
      "name": "meta.function.buzz",
      "match": "\\b(fun)\\b \\b([a-zA-Z][a-zA-Z0-9]*)\\b\\(",
      "captures": {
        "1": {
          "name": "keyword.control.buzz"
        },
        "2": {
          "name": "entity.name.function.buzz meta.definition.function.buzz"
        }
      }
    }
  },
  "scopeName": "source.buzz"
}
