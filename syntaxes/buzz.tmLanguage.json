{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "buzz",
  "patterns": [
    {
      "include": "#zdef"
    },
    {
      "include": "#multiline-zdef"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#objects"
    },
    {
      "include": "#enum"
    },
    {
      "include": "#protocols"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#chars"
    },
    {
      "include": "#multiline-strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#numeric"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#patterns"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#namespace"
    },
    {
      "include": "#qualified"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.buzz",
          "match": "\\b(typeof|type|zdef|void|static|extern|import|export|from|test|as|in|while|if|else|fun|try|catch|throw|constructor|return|switch|default|break|for|foreach|do|until|continue|resolve|resume|yield|any|out|var|final|mut)\\b"
        },
        {
          "name": "keyword.operator.assignment.buzz",
          "match": "="
        },
        {
          "name": "keyword.operator.logical.buzz",
          "match": "\\b(!|and|or|\\?\\?)\\b"
        },
        {
          "name": "keyword.operator.closure.buzz",
          "match": "(=>|::)"
        },
        {
          "name": "keyword.operator.arithmetic.buzz",
          "match": "(\\+|\\-|%|\\*|>>|<<|\\||\\^|&|~|!|\\/[^/]|>)"
        },
        {
          "name": "keyword.operator.comparison.buzz",
          "match": "(==|!=|<=?|>=?|\\bis\\b|\\?\\?)"
        },
        {
          "name": "keyword.declaration.buzz",
          "match": "\\b(enum|object|protocol)\\b"
        },
        {
          "name": "constant.language.buzz",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "variable.language.this.buzz",
          "match": "\\b(this)\\b"
        },
        {
          "name": "storage.type.built-in.primitive.buzz",
          "match": "\\b(ud|str|int|double|obj|fib|bool|pat|type|any|rg|void)\\b\\??"
        }
      ]
    },
    "string-interp": {
      "patterns": [
        {
          "name": "string.interpolated.expression.buzz",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#functions"
            },
            {
              "include": "#objects"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#chars"
            },
            {
              "include": "#multiline-strings"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#numeric"
            },
            {
              "include": "#builtins"
            },
            {
              "include": "#patterns"
            },
            {
              "include": "#function-call"
            }
          ]
        }
      ]
    },
    "patterns": {
      "name": "string.regexp.buzz",
      "begin": "\\$\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.buzz",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        },
        {
          "include": "#string-interp"
        }
      ]
    },
    "chars": {
      "name": "string.quoted.single.buzz",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        }
      ]
    },
    "multiline-strings": {
      "name": "string.multiline.buzz",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "constant.character.escape.buzz",
          "match": "\\\\."
        },
        {
          "include": "#string-interp"
        }
      ]
    },
    "numeric": {
      "name": "numeric.buzz",
      "patterns": [
        {
          "name": "constant.numeric.decimal.buzz",
          "match": "\\b[0-9][0-9]*(\\.[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.binary.buzz",
          "match": "\\b0b[0-1]+\\b"
        },
        {
          "name": "constant.numeric.hexa.buzz",
          "match": "\\b0x[0-9A-Fa-f]+\\b"
        }
      ]
    },
    "comment": {
      "name": "comment.line.buzz",
      "match": "//[^\n]*"
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.comma.buzz",
          "match": ","
        },
        {
          "name": "punctuation.terminator.buzz",
          "match": ";"
        },
        {
          "name": "punctuation.dot.buzz",
          "match": "\\."
        },
        {
          "name": "punctuation.buzz",
          "match": "(:)"
        }
      ]
    },
    "builtins": {
      "match": "\\b(assert|print)\\b",
      "name": "support.function.buzz"
    },
    "function-call": {
      "name": "meta.function-call.buzz",
      "match": "(\\b[a-zA-Z][a-zA-Z0-9_]+\\b)\\s*(::<([^,>]+,?)+>)?\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.buzz"
        },
        "2": {
          "patterns": [
            {
              "includes": "#keywords"
            }
          ]
        }
      }
    },
    "functions": {
      "name": "meta.function.buzz",
      "match": "\\b(fun)\\b\\s+\\b([a-zA-Z][a-zA-Z0-9_]+)\\b\\s*(::<([^,>]+,?)+>)?\\s*\\(",
      "captures": {
        "1": {
          "name": "keyword.control.buzz"
        },
        "2": {
          "name": "entity.name.function.buzz meta.definition.function.buzz"
        },
        "3": {
          "patterns": [
            {
              "includes": "#keywords"
            }
          ]
        }
      }
    },
    "objects": {
      "name": "meta.class.buzz",
      "match": "\\b(object)\\b\\s*(\\((\\b([a-zA-Z][a-zA-Z0-9_]+)\\b(\\s*,\\s*)?)+\\))?\\s+\\b([a-zA-Z][a-zA-Z0-9_]+)\\b\\s*(::<([^,>]+,?)+>)?\\s*\\{",
      "captures": {
        "1": {
          "name": "storage.type.class.buzz"
        },
        "2": {
          "patterns": [
            {
              "include": "#inherited"
            }
          ]
        },
        "6": {
          "name": "entity.name.class.buzz meta.definition.class.buzz"
        },
        "7": {
          "patterns": [
            {
              "include": "#inherited"
            },
            {
              "includes": "#keywords"
            }
          ]
        }
      }
    },
    "enum": {
      "name": "meta.enum.buzz",
      "match": "\\b(enum)\\b\\s*(\\(\\b([a-zA-Z][a-zA-Z0-9_]+)\\b\\))?\\s+\\b([a-zA-Z][a-zA-Z0-9_]+)\\b\\s*\\{",
      "captures": {
        "1": {
          "name": "storage.type.enum.buzz"
        },
        "2": {
          "patterns": [
            {
              "match": "\\b(uint|int|str)\\b",
              "name": "storage.type.buzz"
            }
          ]
        },
        "4": {
          "name": "entity.name.type.enum.buzz"
        }
      }
    },
    "protocols": {
      "name": "meta.interface.buzz",
      "match": "\\b(protocol)\\b\\s+\\b([a-zA-Z][a-zA-Z0-9_]+)\\b\\s*\\{",
      "captures": {
        "1": {
          "name": "keyword.control.buzz"
        },
        "2": {
          "name": "entity.name.interface.buzz"
        }
      }
    },
    "qualified": {
      "match": "\\b(([a-zA-Z][a-zA-Z0-9_]+\\\\)+)([a-zA-Z][a-zA-Z0-9_]+)\\b",
      "captures": {
        "1": {
          "name": "entity.name.type.namespace.php",
          "patterns": [
            {
              "match": "\\\\",
              "name": "punctuation.separator.inheritance.php"
            }
          ]
        },
        "2": {
          "name": "entity.name.buzz"
        }
      }
    },
    "inherited": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z][a-zA-Z0-9_]+)\\b",
          "captures": {
            "1": {
              "name": "entity.other.inherited-class"
            }
          }
        }
      ]
    },
    "zdef": {
      "begin": "\\b(zdef)\\b\\s*\\(\\s*(\"[a-zA-Z_0-9/\\\\\\.]+\")\\s*,\\s*\"",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.buzz"
        },
        "2": {
          "name": "string.quoted.double.buzz"
        }
      },
      "end": "\"\\s*\\)[\\n\\r\\s]*;",
      "patterns": [
        {
          "include": "source.zig"
        }
      ]
    },
    "multiline-zdef": {
      "begin": "\\b(zdef)\\b\\s*\\(\\s*(\"[a-zA-Z_0-9/\\\\\\.]+\")\\s*,\\s*`",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.buzz"
        },
        "2": {
          "name": "string.quoted.double.buzz"
        }
      },
      "end": "`\\s*\\)[\\n\\r\\s]*;",
      "patterns": [
        {
          "include": "source.zig"
        }
      ]
    },
    "namespace": {
      "match": "(namespace)\\s+([a-zA-Z][a-zA-Z0-9_\\\\]+)\\s*;",
      "name": "meta.namespace.php",
      "captures": {
        "1": {
          "name": "keyword.other.namespace.php"
        },
        "2": {
          "name": "entity.name.type.namespace.php",
          "patterns": [
            {
              "match": "\\\\",
              "name": "punctuation.separator.inheritance.php"
            }
          ]
        }
      }
    }
  },
  "scopeName": "source.buzz"
}
